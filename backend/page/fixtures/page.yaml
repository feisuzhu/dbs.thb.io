- model: page.articlecategory
  pk: 1
  fields:
    slug: page
    name: 站内单页(内部)
    sort: 999
    hidden: true
- model: page.articlecategory
  pk: 2
  fields:
    slug: changelog
    name: 更新记录
    sort: 999
    hidden: true
- model: page.articlecategory
  pk: 3
  fields:
    slug: episode
    name: 作品
    sort: 0
    hidden: false
- model: page.articlecategory
  pk: 4
  fields:
    slug: campaign
    name: 活动
    sort: 1
    hidden: false
- model: page.articlecategory
  pk: 5
  fields:
    slug: arbitration
    name: 裁定
    sort: 2
    hidden: false
- model: page.articlecategory
  pk: 6
  fields:
    slug: blog
    name: 博客
    sort: 3
    hidden: false
- model: page.articlecategory
  pk: 7
  fields:
    slug: misc
    name: 杂项
    sort: 4
    hidden: false
- model: page.article
  pk: 1
  fields:
    slug: rules
    category: 1
    title: 规则说明
    content: "# Hello, World!\r\n\r\nTaichi is a domain-specific language embedded
      in Python and designed specifically for high-performance, parallel computing.\r\n\r\nWhen
      writing compute-intensive tasks in Python, you can take advantage of Taichi's
      high performance computation by following a few extra rules. Generally, Taichi
      provides two decorators `@ti.func` and `@ti.kernel`, which instruct Taichi to
      take over the tasks. Its just-in-time (JIT) compiler compiles the decorated
      functions to machine code, and all subsequent calls to these functions are executed
      on multi-core CPUs or GPUs. In a typical compute-intensive scenario, such as
      a numerical simulation, Taichi can accelerate performance by 50x~100x compared
      with native Python code.\r\n\r\nTaichi also has a built-in ahead-of-time (AOT)
      system for exporting your code into binary/shader files, which can then be called
      in C/C++ and run without the Python environment. See the [AOT deployment](../deployment/ndarray_android.md)
      for more information.\r\n\r\n## Prerequisites\r\n\r\n- Python: 3.7/3.8/3.9/3.10
      (64-bit)\r\n- OS: Windows, OS X, and Linux (64-bit)\r\n\r\n## Installation\r\n\r\nTaichi
      is available as a PyPI package:\r\n\r\n```bash\r\npip install taichi\r\n```\r\n\r\n##
      Hello, world!\r\n\r\nA basic fractal example, the [Julia fractal](https://en.wikipedia.org/wiki/Julia_set),
      can be a good starting point for you to understand the fundamentals of the Taichi
      programming language.\r\n\r\n```python title=fractal.py\r\nimport taichi as
      ti\r\nimport taichi.math as tm\r\n\r\nti.init(arch=ti.gpu)\r\n\r\nn = 320\r\npixels
      = ti.field(dtype=float, shape=(n * 2, n))\r\n\r\n@ti.func\r\ndef complex_sqr(z):
      \ # complex square of a 2D vector\r\n    return tm.vec2(z[0] * z[0] - z[1] *
      z[1], 2 * z[0] * z[1])\r\n\r\n@ti.kernel\r\ndef paint(t: float):\r\n    for
      i, j in pixels:  # Parallelized over all pixels\r\n        c = tm.vec2(-0.8,
      tm.cos(t) * 0.2)\r\n        z = tm.vec2(i / n - 1, j / n - 0.5) * 2\r\n        iterations
      = 0\r\n        while z.norm() < 20 and iterations < 50:\r\n            z = complex_sqr(z)
      + c\r\n            iterations += 1\r\n        pixels[i, j] = 1 - iterations
      * 0.02\r\n\r\ngui = ti.GUI(\"Julia Set\", res=(n * 2, n))\r\n\r\nfor i in range(1000000):\r\n
      \   paint(i * 0.03)\r\n    gui.set_image(pixels)\r\n    gui.show()\r\n```\r\n\r\nSave
      the code above to your local machine and run this program.\r\n\r\n\r\n*You get
      the following animation:*\r\n\r\n<center>\r\n\r\n![image](https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal.gif)\r\n\r\n</center>\r\n\r\n:::note\r\n\r\nIf
      you are *not* using an IDE for running code, you can simply run the code from
      your terminal by:\r\n\r\n1. Go to the directory that contains your .py file\r\n2.
      Type in `python3 *nameOfFile*.py` (replace *nameOfFile* with your programs name.
      Be sure to include the `.py` extension)\r\n\r\n:::\r\n\r\nLet's dive into this
      simple Taichi program.\r\n\r\n### Import Taichi\r\n\r\nThe first two lines import
      Taichi and its `math` module. The `math` module contains built-in vectors and
      matrices of small dimensions, such as `vec2` for 2D real vectors and `mat3`
      for 3&times;3 real matrices.\r\n\r\nSee the [Math Module](../math/math_module.md)
      for more information.\r\n\r\n\r\n### Initialize Taichi\r\n\r\n:::note\r\n`ti.init(**kwargs)`-
      Initializes Taichi environment and allows you to customize your Taichi runtime
      depending on the optional arguments passed into it.\r\n:::\r\n\r\nFor now, we
      only introduce the most important argument, namely, `arch`.\r\n\r\nThe argument
      `arch` specifies the *backend* that executes the compiled code. A backend can
      be either `ti.cpu` or `ti.gpu`. When `ti.gpu` is specified, Taichi moves down
      the backend list of `ti.cuda`, `ti.vulkan`, and `ti.opengl/ti.metal`. If no
      GPU architecture is available, Taichi falls back to your CPU device.\r\n\r\nYou
      can also directly specify which GPU backend to use. For example, set `arch=ti.cuda`
      to run your program on CUDA. Taichi raises an error if the target architecture
      is unavailable. See the [Global Settings](../reference/global_settings.md) for
      more information about `ti.init()`.\r\n\r\n```python{4}\r\nimport taichi as
      ti\r\nimport taichi.math as tm\r\n\r\nti.init(arch=ti.gpu)\r\n```\r\n\r\n###
      Define a Taichi field\r\n\r\n:::note\r\n`ti.field(dtype, shape)` - Defines a
      Taichi field whose shape is of `shape` and whose elements are of type `dtype`.\r\n\r\n`ti.field`
      is the most important and frequently used data structure in Taichi. You can
      compare it to NumPy's `ndarray` or PyTorch's `tensor`. But Taichi's field is
      more flexible. For example, a Taichi field can be [spatially sparse](../basic/sparse.md)
      and easily [switched between different data layouts](../basic/layout.md).\r\n\r\nWe
      will introduce more advanced features of fields in other scenario-based tutorials.
      For now, it suffices to know that the field `pixels` is a dense 2D array.\r\n\r\n```python\r\nn
      = 320\r\npixels = ti.field(dtype=float, shape=(n * 2, n))\r\n```\r\n\r\n\r\n###
      Kernels and functions\r\n\r\nLines 9~22 define two functions, one decorated
      with `@ti.func` and the other with `@ti.kernel`. They are called *Taichi function*
      and *kernel* respectively. Taichi functions and kernels are not executed by
      Python's interpreter but taken over by Taichi's JIT compiler and deployed to
      your parallel multi-core CPU or GPU.\r\n\r\nThe main differences between Taichi
      functions and kernels:\r\n\r\n- Kernels are the entry points where Taichi kicks
      in and takes over the task. A kernel can be called anywhere, anytime in your
      program, while a Taichi function can be called only from inside a kernel or
      from inside another Taichi function. In the example above, the Taichi function
      `complex_sqr` is called by the kernel `paint`.\r\n- A kernel *must* take type-hinted
      arguments and return type-hinted results. But Taichi functions do not require
      type hinting. In the example above, the argument `t` in the kernel `paint` is
      type hinted; the argument `z` in the Taichi function `complex_sqr` is not.\r\n-
      Taichi *supports* nested functions but *does not support* nested kernels.\r\n-
      Taichi *does not* support recursive Taichi function calls.\r\n\r\n:::tip\r\n​\r\nFor
      those who come from the world of CUDA, `ti.func` corresponds to `__device__`
      and `ti.kernel` corresponds to `__global__`.\r\n\r\nFor those who come from
      the world of OpenGL, `ti.func` corresponds to the usual function in GLSL and
      `ti.kernel` corresponds to a `compute shader`.\r\n\r\n:::\r\n\r\n### Parallel
      for loops\r\n\r\nThe key to high performance lies in how you iterate in Taichi.
      In particular, we can use parallelized looping to parse through our data more
      efficiently.\r\n\r\nThe following code snippet introduces a `for` loop at the
      outermost scope in a Taichi kernel and thus is *automatically parallelized*.
      Notice that the loop is also calling both `i` and `j` at the same time, and
      the program will run these iterations concurrently.\r\n\r\nTaichi offers a handy
      syntax sugar: It parallelizes any `for` loop at the outermost scope in a kernel.
      This means that you can parallelize your tasks using one plain loop, without
      the need to know thread allocation/recycling or memory management.\r\n\r\nNote
      that the field `pixels` is treated as an iterator. As the indices of the field
      elements, `i` and `j` are integers falling in the ranges `[0, 2*n-1]` and `[0,
      n-1]`, respectively. The pair `(i, j)` loops over the sets `(0, 0)`, `(0, 1)`,
      ..., `(0, n-1)`, `(1, n-1)`, ..., `(2*n-1, n-1)` in parallel.\r\n\r\n\r\n```python\r\nfor
      i, j in pixels:\r\n```\r\n\r\n\r\nKeep in mind that the *for loops not at the
      outermost scope are not parallelized* but handled serially:\r\n\r\n```python
      {3,7,14-15}\r\n@ti.kernel\r\ndef fill():\r\n    total = 0\r\n    for i in range(10):
      # Parallelized\r\n        for j in range(5): # Serialized in each parallel thread\r\n
      \           total += i * j\r\n\r\n    if total > 10:\r\n        for k in range(5):
      \ # Not parallelized because it is not at the outermost scope\r\n```\r\n\r\nYou
      can also serialize a for loop at the outermost scope using `ti.loop_config(serialize=True)`.
      See [Serialize a specified parallel for loop](../debug/debugging.md#serialize-a-specified-parallel-for-loop)
      for more information.\r\n\r\n:::caution WARNING\r\n\r\nThe `break` statement
      is *not* supported in parallelized loops:\r\n\r\n```python\r\n@ti.kernel\r\ndef
      foo():\r\n    for i in x:\r\n        ...\r\n        break # Error!\r\n\r\n@ti.kernel\r\ndef
      foo():\r\n    for i in x:\r\n        for j in range(10):\r\n            ...\r\n
      \           break # OK!\r\n```\r\n\r\n:::\r\n\r\n### Display the result\r\n\r\nLines
      18~23 render the result on your screen using Taichi's built-in [GUI System](../visualization/gui_system.md):\r\n\r\n```python\r\ngui
      = ti.GUI(\"Julia Set\", res=(n * 2, n))\r\n# Sets the window title and the resolution\r\n\r\nfor
      i in range(1000000):\r\n    paint(i * 0.03)\r\n    gui.set_image(pixels)\r\n
      \   gui.show()\r\n```\r\n\r\nThe program iterates over `pixels` 1,000,000 times,
      and the fractal pattern stored in `pixels` is updated accordingly. Call `gui.set_image()`
      to set the window and `gui.show()` to display the synchronized result on your
      screen.\r\n\r\n### Key takeaways\r\n\r\nCongratulations! After walking through
      the short example above, you have learned the most significant features of Taichi:\r\n\r\n-
      Taichi compiles and runs Taichi functions and kernels on the specified backend.\r\n-
      For loops at the outermost scope in a Taichi kernel are automatically parallelized.\r\n-
      Taichi provides a flexible data container field, and you can use indices to
      loop over a field.\r\n\r\n## Taichi examples\r\n\r\nThe Julia fractal is one
      of the representative demos Taichi provides. To view more selected demos in
      Taichi gallery:\r\n\r\n```bash\r\nti gallery\r\n```\r\n\r\nThis window appears:\r\n\r\n<center>\r\n\r\n![image](https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/taichi-gallery.png)\r\n\r\n</center>\r\n\r\nTo
      access the full list of Taichi examples, run `ti example`. Other useful command
      lines:\r\n\r\n- `ti example -p fractal`/`ti example -P fractal` prints the source
      code of the fractal example.\r\n- `ti example -s fractal` saves the example
      to your current work directory.\r\n\r\n## Supported systems and backends\r\n\r\nThe
      following table lists the supported operating systems and the backends that
      Taichi supports on these platforms:\r\n\r\n| **platform** |      **CPU**       |
      \     **CUDA**      |     **OpenGL**     |     **Metal**      |    **Vulkan**
      \   |\r\n| :----------: | :----------------: | :----------------: | :----------------:
      | :----------------: | :----------------: |\r\n|   Windows    | :heavy_check_mark:
      | :heavy_check_mark: | :heavy_check_mark: |        N/A         | :heavy_check_mark:
      |\r\n|    Linux     | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:
      |        N/A         | :heavy_check_mark: |\r\n|    macOS     | :heavy_check_mark:
      |        N/A         |        N/A         | :heavy_check_mark: | :heavy_check_mark:
      |\r\n\r\n- :heavy_check_mark:: supported;\r\n- N/A: not available\r\n\r\nYou
      are now ready to move on and start writing your own Taichi programs. See the
      following documents for more information about how to use Taichi in some of
      its typical application scenarios:\r\n- [Accelerate Python with Taichi](./accelerate_python.md)\r\n-
      [Conduct Physical Simulation](./cloth_simulation.md)\r\n- [Accelerate PyTorch
      with Taichi](./accelerate_pytorch.md)."
    created_at: 2023-02-25 10:13:31.588841+00:00
    updated_at: 2023-02-25 10:16:08.308999+00:00
- model: page.article
  pk: 2
  fields:
    slug: vocabulary
    category: 1
    title: 用语参考
    content: asdfasdf
    created_at: 2023-02-25 10:14:37.190044+00:00
    updated_at: 2023-02-25 10:14:37.190068+00:00
- model: page.landing
  pk: 1
  fields:
    logo: page/logo.png
    monologo: page/monologo.png
    small_slogan: '现世决斗异变已然开启，少女们的力量凭依于符卡，幕后的真凶仍隐于谜团…… '
    big_slogan: 欢迎来到梦斗符的世界！
    footer: "© 2023.Project DBS. All rights reserved.\r\nPowered by iRinwind & Proton"
- model: page.landingwork
  pk: 1
  fields:
    landing: 1
    image: page/work-YXSZ.jpg
    title: 初战之舞 妖星闪奏曲
    subtitle: 即将于 ComicUP20 上市
    description: 琪露诺终于再也无法忍受三月精小队的嘲弄和恶作剧， 她发誓将用她得意的冰冻能力让三月精知道什么叫「最强」！ 于是她拉上了蕾蒂和大妖精组成了新的联队……
      妖精大战争，一触即发！
    url: http://mdf.best
    urltext: 了解更多…
    sort: 1
- model: page.landingwork
  pk: 2
  fields:
    landing: 1
    image: page/work-YYYH.jpg
    title: 扩充包 永夜月华之章
    subtitle: 即将于 ComicUP20 上市
    description: 红月降临，万物疯狂，藏匿在竹林深处的永远亭， 究竟谁才是这场夺走真实之月，创造虚伪红月的主犯？
    url: http://mdf.best
    urltext: 了解更多…
    sort: 2
- model: page.landingwork
  pk: 3
  fields:
    landing: 1
    image: page/work-QSLW.jpg
    title: 扩充包 七色轮舞之章
    subtitle: 已于 ComicUP19 上市
    description: 七色的人偶师，七曜的魔女与七彩的门卫。 绚烂华彩将一同绽放！
    url: http://mdf.best
    urltext: 了解更多…
    sort: 3
- model: page.landingwork
  pk: 4
  fields:
    landing: 1
    image: page/work-MLXY.jpg
    title: 扩充包 梦恋星愿之章
    subtitle: 已于 ComicUP19 上市
    description: 博丽的巫女、黑白的魔法使、祝风的现人神…… 幻想乡的故事，由此开始！
    url: http://mdf.best
    urltext: 了解更多…
    sort: 4
- model: page.landingcolumn
  pk: 1
  fields:
    landing: 1
    title: 快速上手
    subtitle: 梦斗符是一款全新概念的集换式卡牌游戏。
    description: 在具有两人对战，收集卡牌，构建卡组与交易等传统TCG元素的基础上，首次以「弹幕相杀」而不是「场上生物」为核心设计规则，更契合东方Project的世界观，同时降低了上手难度.
    url: http://mdf.best/#/rules
    urltext: 了解梦斗符规则...
    sort: 1
- model: page.landingcolumn
  pk: 2
  fields:
    landing: 1
    title: 华丽精美
    subtitle: 梦斗符是开放合作、兼容并包的同人企划。
    description: 所使用的所有插绘都是画师的授权作品。而卡框UI则由主催统一精心设计。梦斗符接纳了各种不同风格的插绘，无论是软萌或帅气，亦或是赛璐璐或厚涂，总有能触动你的瞬间！
    url: http://mdf.best/#/list
    urltext: 查看精美卡面...
    sort: 2
- model: page.landingcolumn
  pk: 3
  fields:
    landing: 1
    title: 诚意制作
    subtitle: 梦斗符用料扎实、工艺先进、包装精美。
    description: 采用与《万智牌》同样的6.3cm*8.8cm的标准大尺寸切割。力求手感舒适，同时便于使用通用卡套收藏。梦斗符的游戏过程可以不依赖游戏场地，随时随地都可来一场符卡决斗！
    url: https://projectzephyr.taobao.com/
    urltext: 立即购买...
    sort: 3
- model: page.landingslide
  pk: 1
  fields:
    landing: 1
    image: page/slide-1.jpg
    url: http://mdf.best
    sort: 1
- model: page.landingslide
  pk: 2
  fields:
    landing: 1
    image: page/slide-2.jpg
    url: http://mdf.best
    sort: 2
- model: page.landingslide
  pk: 3
  fields:
    landing: 1
    image: page/slide-3.jpg
    url: http://mdf.best
    sort: 3
- model: page.outboundlink
  pk: 1
  fields:
    name: 淘宝
    icon: page/icon-taobao.png
    mono: page/icon-taobao-mono.png
    url: http://taobao.com
    sort: 1
- model: page.outboundlink
  pk: 2
  fields:
    name: 微博
    icon: page/icon-weibo.png
    mono: page/icon-weibo-mono.png
    url: http://weibo.com
    sort: 2
- model: page.outboundlink
  pk: 3
  fields:
    name: QQ
    icon: page/icon-qq.png
    mono: page/icon-qq-mono.png
    url: http://qq.com
    sort: 3
- model: page.outboundlink
  pk: 4
  fields:
    name: 微信
    icon: page/icon-weixin.png
    mono: page/icon-weixin-mono.png
    url: http://wx.qq.com
    sort: 4
- model: page.outboundlink
  pk: 5
  fields:
    name: bilibili
    icon: page/icon-bilibili.png
    mono: page/icon-bilibili-mono.png
    url: http://bilibili.com
    sort: 5
